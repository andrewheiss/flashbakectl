#!/bin/sh
#
# Author:		Andrew Heiss - http://www.andrewheiss.com
# Project site: http://github.com/andrewheiss/flashbakectl
# Description: 	Allows Flashbake to be controlled by a launchd plist rather than cron
# License: 		Licensed under the MIT License (see README for details)
# Date: 		September 23, 2009
# Version:		1.1 (February 19, 2010)
#


#----------------------
# Begin actual script
#----------------------

# Display usage instructions
usage() {
	cat <<EndUsage

##############
flashbakectl	
##############

flashbakectl allows you to dynamically load and unload a plist file 
to control how often Flashbake routinely runs. Rather than set up a 
permanent daemon that needlessly runs all the time, load the plist 
when you start writing and unload it when you're done.

Options:
	-a		Run Flashbake automatically (only use with cron or plists)
	-c sample	Specify which project configuration file you want to use
	-h		Show this message
	-l		Load the plist
	-m		Run Flashbake manually
	-p		Push master branch to the remote server
	-u		Unload the plist
	-v		See file version
	
Example:
	flashbakectl -c sample -l

EndUsage
	exit
}

# Display version
version() { 
	cat <<EndVersion
Flashbakectl v.1.1
EndVersion
	exit
}

# Load the plist into launchd
load() {
	launchctl setenv PATH $PATH
	launchctl load -w $PLIST
	echo "plist loaded for $TITLE."
	exit
}

# Unload the plist from launchd
unload() {
	launchctl setenv PATH /usr/bin:/bin:/usr/sbin:/sbin
	launchctl unload -w $PLIST
	echo "plist unloaded for $TITLE."
	exit
}

# Run Flashbake - use with automated scripts.
# The only different between this and manual() is the log message
automatic() {
	echo "Automatically running Flashbake for $TITLE."
	run
	exit
}

# Run Flashbake manually
manual() {
	echo "Running Flashbake manually for $TITLE."
	run
	exit
}

# Push master branch to server
push() {
	echo "Pushing $REPO master for $TITLE"
	cd "$PROJECT" && git push $REPO master
	exit
}

# Actually run Flashbake
run() {
	$FLASHBAKE "$PROJECT" 0 > /dev/null
}

# Listen for script options
while getopts "ac:hlmpuv" Option
do
	case $Option in 
	  a)
		automatic
		;;
		c)
		PWD="$(dirname "$(test -L "$0" && readlink "$0" || echo "$0")")"
		source $PWD/$OPTARG.cfg
		;;
	  h)
		usage
		;;
	  l)
		load
		;;
	  m)
		manual
		;;
		p)
		push
		;;
	  u)
		unload
		;;
	  v)
		version
		;;
		:)
    echo "Option -$OPTARG requires an argument."
    exit 1
    ;;
	  *)
		usage
		;;
	esac
done

# Display usage options by default. Script needs a flag to run properly.
usage